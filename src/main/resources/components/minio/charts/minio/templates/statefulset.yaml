{{- if eq .Values.mode "distributed" }}
{{ $zoneCount := .Values.zones | int }}
{{ $nodeCount := .Values.replicas | int }}
{{ $drivesPerNode := .Values.drivesPerNode | int }}
{{ $scheme := "http" }}
{{- if .Values.tls.enabled }}
{{ $scheme = "https" }}
{{ end }}
{{ $mountPath := .Values.mountPath }}
{{ $bucketRoot := or ($.Values.bucketRoot) ($.Values.mountPath) }}
{{ $subPath := .Values.persistence.subPath }}
{{ $penabled := .Values.persistence.enabled }}
{{ $accessMode := .Values.persistence.accessMode }}
{{ $storageClass := .Values.persistence.storageClass }}
{{ $psize := .Values.persistence.size }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "minio.fullname" . }}-svc
  labels:
    app: {{ include "minio.fullname" . }}
    {{- include "minio.labels" . | nindent 4 }}
spec:
  type: NodePort
  ports:
    - port: 9000
      nodePort: {{ .Values.service.nodePort }}
      name: minio
      targetPort: 9000
  selector:
    app: {{ include "minio.fullname" . }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "minio.fullname" . }}
  labels:
    app: {{ include "minio.fullname" . }}
    component: minio
    {{- include "minio.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "minio.fullname" . }}-svc
  selector:
    matchLabels:
      app: {{ include "minio.fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ include "minio.fullname" . }}
    spec:
      affinity:
        {{- if eq .Values.podAntiAffinity "hard"}}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ include "minio.fullname" . }}
            topologyKey: {{ .Values.podAntiAffinityTopologKey }}
        {{- else if eq .Values.podAntiAffinity "soft"}}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: {{ .Values.podAntiAffinityTopologKey }}
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ include "minio.fullname" . }}
        {{- end}}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ include "minio.fullname" . }}
        env:
        - name: MINIO_ACCESS_KEY
          value: {{ .Values.accessKey }}
        - name: MINIO_SECRET_KEY
          value: {{ .Values.secretKey }}
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        {{- range $key, $val := .Values.environment }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end}}
        image: {{ .Values.image.repository }}/minio:{{ .Values.image.minioTag }}
        livenessProbe:
          httpGet:
            path: /minio/health/live
            {{- if .Values.tls.enabled }}
            port: 9000
            {{ else }}
            port: 9000
            {{- end }}
            {{- if .Values.tls.enabled }}
            scheme: HTTPS
            {{ else }}
            scheme: HTTP
            {{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        args:
        - server
        - {{- range $i := until $zoneCount }}{{ $factor := mul $i $nodeCount }}{{ $endIndex := add $factor $nodeCount }}{{ $beginIndex := mul $i $nodeCount }}  {{ $scheme }}://{{ template `minio.fullname` $ }}-{{ `{` }}{{ $beginIndex }}...{{ sub $endIndex 1 }}{{ `}`}}.{{ template `minio.fullname` $ }}-svc.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}{{if (gt $drivesPerNode 1)}}{{ $bucketRoot }}-{{ `{` }}0...{{ sub $drivesPerNode 1 }}{{ `}` }}{{else}}{{ $bucketRoot }}{{end}}{{- end}}{{- template `minio.extraArgs` . }}
        ports:
        - containerPort: 9000
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        # These volume mounts are persistent. Each pod in the PetSet
        # gets a volume mounted based on this field.
        volumeMounts:
          {{- if $penabled }}
          {{- if (gt $drivesPerNode 1) }}
          {{- range $i := until $drivesPerNode }}
          - name: export-{{ $i }}
            mountPath: {{ $mountPath }}-{{ $i }}
            {{- if and $penabled $subPath }}
            subPath: {{ $subPath }}
            {{- end }}
          {{- end }}
          {{- else }}
          - name: export
            mountPath: {{ $mountPath }}
            {{- if and $penabled $subPath }}
            subPath: {{ $subPath }}
            {{- end }}
          {{- end }}
          {{- end }}
          
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  volumeClaimTemplates:
  {{- if gt $drivesPerNode 1 }}
    {{- range $diskId := until $drivesPerNode}}
    - metadata:
        name: export-{{ $diskId }}
      spec:
        accessModes: [ {{ $accessMode | quote }} ]
        {{- if $storageClass }}
        storageClassName: {{ $storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ $psize }}
    {{- end }}
  {{- else }}
    - metadata:
        name: export
      spec:
        accessModes: [ {{ $accessMode | quote }} ]
        {{- if $storageClass }}
        storageClassName: {{ $storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ $psize }}
  {{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "minio.fullname" . }}-setup
  labels:
    app: {{ include "minio.fullname" . }}
    {{- include "minio.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      name: {{ include "minio.fullname" . }}-setup
    spec:
      restartPolicy: OnFailure
      volumes:
      - name: config
        emptyDir: {}
      containers:
      - name: mc
        image: {{ .Values.image.repository }}/minio-mc:{{ .Values.image.mcTag }}
        imagePullPolicy: IfNotPresent
        resources:
           limits:
             cpu: 500m
             memory: 1024Mi
           requests:
             cpu: 100m
             memory: 256Mi
        command:
        - /bin/sh
        - -c
        - mc --config-dir=/config config host add minio http://{{ include "minio.fullname" . }}-svc.{{ .Release.Namespace }}.svc.{{ $.Values.clusterDomain }}:9000 {{ .Values.accessKey }} {{ .Values.secretKey }} && mc --config-dir=/config mb --region={{ .Values.minioArgs.regionName }} -p minio/{{ .Values.minioArgs.bucketName }}
        volumeMounts:
        - name: config
          mountPath: "/config"
{{- end }}
